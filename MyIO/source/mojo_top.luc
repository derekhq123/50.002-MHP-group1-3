module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output a,
    output b,
    output cin,
    input cout,
    input s
  ) {
  var an;
  var bn;
  var cn;
  var index;
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      dff counter[28];
      fsm state = {S0,S1,S2,S3,S4,S5,S6,S7,S8};
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    io_led = {8x{0},8x{0},8x{0}};
    
    a = 0;
    b = 0;
    cin = 0;
    an = io_dip[2][7];
    bn = io_dip[1][7];
    cn = io_dip[0][7];
    index = an*4 + bn*2 + cn;
    
    a=an;b=bn;cin=cn;
    if(io_dip[0][0]==1){
    
      if(s+cout*2==an+bn+cn){
        io_led[2][index]=1;
        
      }
    }
    else{
      if(counter.q[27]==0){
        if(counter.q[26]==0){
          if(counter.q[25]==0)state.d=state.S0;
          else{state.d=state.S1;}
        }else{
          if(counter.q[25]==0)state.d=state.S2;
          else{state.d=state.S3;}
        }
      }else{
        if(counter.q[26]==0){
          if(counter.q[25]==0)state.d=state.S4;
          else{state.d=state.S5;}
        }else{
          if(counter.q[25]==0)state.d=state.S6;
          else{state.d=state.S7;}
        }
      }
      counter.d=counter.q+1;
      case(state.q){
        state.S0:
          a=0;b=0;cin=0;
          io_led[2][0]=!(s||cout);
        state.S1:
          a=0;b=0;cin=1;
          io_led[2][1]=s&& !cout;
        state.S2:
          a=0;b=1;cin=0;
          io_led[2][2]=s&& !cout;
        state.S3:
          a=0;b=1;cin=1;
          io_led[2][3]=!s&& cout;
        state.S4:
          a=1;b=0;cin=0;
          io_led[2][4]=s&& !cout;
        state.S5:
          a=1;b=0;cin=1;
          io_led[2][5]=!s&& cout;
        state.S6:
          a=1;b=1;cin=0;
          io_led[2][6]=!s&& cout;
        state.S7:
          a=1;b=1;cin=1;
          io_led[2][7]=s&& cout;
      }
    }
  }
}