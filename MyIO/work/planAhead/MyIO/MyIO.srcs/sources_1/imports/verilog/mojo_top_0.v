/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg a,
    output reg b,
    output reg cin,
    input cout,
    input s
  );
  
  
  
  integer an;
  
  integer bn;
  
  integer cn;
  
  integer index;
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  localparam S0_state = 4'd0;
  localparam S1_state = 4'd1;
  localparam S2_state = 4'd2;
  localparam S3_state = 4'd3;
  localparam S4_state = 4'd4;
  localparam S5_state = 4'd5;
  localparam S6_state = 4'd6;
  localparam S7_state = 4'd7;
  localparam S8_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = S0_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    io_led = 24'h000000;
    a = 1'h0;
    b = 1'h0;
    cin = 1'h0;
    an = io_dip[16+7+0-:1];
    bn = io_dip[8+7+0-:1];
    cn = io_dip[0+7+0-:1];
    index = an * 3'h4 + bn * 2'h2 + cn;
    a = an;
    b = bn;
    cin = cn;
    if (io_dip[0+0+0-:1] == 1'h1) begin
      if (s + cout * 2'h2 == an + bn + cn) begin
        io_led[16+(index)*1+0-:1] = 1'h1;
      end
    end else begin
      if (M_counter_q[27+0-:1] == 1'h0) begin
        if (M_counter_q[26+0-:1] == 1'h0) begin
          if (M_counter_q[25+0-:1] == 1'h0) begin
            M_state_d = S0_state;
          end else begin
            M_state_d = S1_state;
          end
        end else begin
          if (M_counter_q[25+0-:1] == 1'h0) begin
            M_state_d = S2_state;
          end else begin
            M_state_d = S3_state;
          end
        end
      end else begin
        if (M_counter_q[26+0-:1] == 1'h0) begin
          if (M_counter_q[25+0-:1] == 1'h0) begin
            M_state_d = S4_state;
          end else begin
            M_state_d = S5_state;
          end
        end else begin
          if (M_counter_q[25+0-:1] == 1'h0) begin
            M_state_d = S6_state;
          end else begin
            M_state_d = S7_state;
          end
        end
      end
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_state_q)
        S0_state: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h0;
          io_led[16+0+0-:1] = !(s || cout);
        end
        S1_state: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h1;
          io_led[16+1+0-:1] = s && !cout;
        end
        S2_state: begin
          a = 1'h0;
          b = 1'h1;
          cin = 1'h0;
          io_led[16+2+0-:1] = s && !cout;
        end
        S3_state: begin
          a = 1'h0;
          b = 1'h1;
          cin = 1'h1;
          io_led[16+3+0-:1] = !s && cout;
        end
        S4_state: begin
          a = 1'h1;
          b = 1'h0;
          cin = 1'h0;
          io_led[16+4+0-:1] = s && !cout;
        end
        S5_state: begin
          a = 1'h1;
          b = 1'h0;
          cin = 1'h1;
          io_led[16+5+0-:1] = !s && cout;
        end
        S6_state: begin
          a = 1'h1;
          b = 1'h1;
          cin = 1'h0;
          io_led[16+6+0-:1] = !s && cout;
        end
        S7_state: begin
          a = 1'h1;
          b = 1'h1;
          cin = 1'h1;
          io_led[16+7+0-:1] = s && cout;
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
